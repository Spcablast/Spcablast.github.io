<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YP Blog</title>
  
  <subtitle>�̵Ĳ���</subtitle>
  <link href="http://spcablast.club/atom.xml" rel="self"/>
  
  <link href="http://spcablast.club/"/>
  <updated>2022-03-26T02:43:32.654Z</updated>
  <id>http://spcablast.club/</id>
  
  <author>
    <name>YP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>testmysite</title>
    <link href="http://spcablast.club/2022/03/26/testmysite/"/>
    <id>http://spcablast.club/2022/03/26/testmysite/</id>
    <published>2022-03-26T02:43:32.000Z</published>
    <updated>2022-03-26T02:43:32.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>阅读</title>
    <link href="http://spcablast.club/2022/03/26/%E9%98%85%E8%AF%BB/"/>
    <id>http://spcablast.club/2022/03/26/%E9%98%85%E8%AF%BB/</id>
    <published>2022-03-26T02:15:49.318Z</published>
    <updated>2022-03-03T00:30:53.503Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><p>要不要先说自己的啊，好像前言说过了，那就</p><p>话不多说，直接引用</p><p>看书：看看而已，那些字都认得，句子也没有不通的，但是就是不知道它什么意思。</p><blockquote><p>不知道什么意思有一个原因是我们积累不够，也有tobecontinue…</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>报的错</title>
    <link href="http://spcablast.club/2022/03/26/%E6%8A%A5%E7%9A%84%E9%94%99/"/>
    <id>http://spcablast.club/2022/03/26/%E6%8A%A5%E7%9A%84%E9%94%99/</id>
    <published>2022-03-26T02:15:49.313Z</published>
    <updated>2022-03-18T00:50:53.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="无限更新的报错"><a href="#无限更新的报错" class="headerlink" title="###无限更新的报错"></a>###无限更新的报错</h2><p>VS:</p><p>###用#define pi,#define eps这种语句会导致和opencv里的pi,eps冲突，使得opencv编译不成功。</p><p>dll 64位的程序放了32为位的dll，在运行的时候就会报0xc0000007b的错</p><p>Hexo:</p><p>报错：</p><p>kex_exchange_identification: read: Connection reset by peer<br>Connection reset by 20.205.243.166 port 22</p><p>本次原因：端口22被占用了，甚至没找到是谁占的，气人</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>心理学部分</title>
    <link href="http://spcablast.club/2022/03/26/%E5%BF%83%E7%90%86%E5%AD%A6%E9%83%A8%E5%88%86/"/>
    <id>http://spcablast.club/2022/03/26/%E5%BF%83%E7%90%86%E5%AD%A6%E9%83%A8%E5%88%86/</id>
    <published>2022-03-26T02:15:49.312Z</published>
    <updated>2022-02-16T11:00:20.305Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2>心理学</h2><h3>定义</h3>开局先打个比方，我们不能准确的制约一个人体的每个原子的引力的相互作用的方程，但是对于所有实用的目的，一个人与地球之间的引力只需寥寥几个数值；类似的，我们不能解制约复杂的原子和分子行为的方程，但我们发明了一种称为化学的有效理论[1]，在未解释相互作用的每个细节的情形下，它提供化学反应中原子和分子如何行为的解释。<p>由此类推到人的情况中，因为我们不能确定我们行为的方程，所以我们利用人拥有自由意志的有效理论。<strong>研究我们的意志以及所引起的行为的是心理学</strong>。（可以适度的成功预言行为）</p><p>以上两段来自《大设计》，想说明心理学的定义，有一个我们无法具体理解的事物，但是我们能根据现象总结出来一个规律并用此预测这个事物的发展，这个事物是人的行为，这个用来预测他的模型叫心理学。</p><blockquote><p>刚发现一件事，当我通过阅读理解一个文本的时候，我已经把这个文本转成我自己能理解的内容了，于是我认为他是易于理解的，但是对于他人来说，可能不是的。所以要与他人分享一个文本的时候，最好加上自己的观点，否则他人从这个文本中理解到的大概率与你不同。</p></blockquote><blockquote><p>又及，文本太长可能会降低读者的阅读兴趣。比如我用了500多字写了个引言</p></blockquote><h3>心理学全家福</h3>好的，显然心理学有一大堆的分支，想了解一个事物必然逃不过了解他的发展史，就像俩人聊天总逃不过聊过去的经历。<p>本书认为冯特是“心理学之父”，因为他尝试用科学的方法观察感觉、表象、情感对人产生的影响，给心理学开了个好头。</p><blockquote><p>显然，本书是想让心理学往科学靠一靠的</p></blockquote><h3>结构主义心理学</h3><h3>机能主义心理学</h3><h3>行为主义心理学</h3><h3>格式塔心理学</h3><h3>精神分析心理学</h3><h3>人本主义心理学</h3><p>#####</p><p>#####</p><p>[1] <em>有效理论：一种被创造来模拟某种被观察的现象，而不用仔细的描述所有的基本过程</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>typora测试</title>
    <link href="http://spcablast.club/2022/03/26/typora%E6%B5%8B%E8%AF%95/"/>
    <id>http://spcablast.club/2022/03/26/typora%E6%B5%8B%E8%AF%95/</id>
    <published>2022-03-26T02:15:49.308Z</published>
    <updated>2022-02-18T07:53:43.528Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Typora测试"><a href="#Typora测试" class="headerlink" title="Typora测试"></a>Typora测试</h3><h5 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h5><p>由于正式版收费，先下个老版本用用看<a href="https://github.com/ydsuper/Typora_Free_Download/" target="_blank" rel="noopener">下载地址</a></p><h5 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h5><h6 id="基础文字编辑功能："><a href="#基础文字编辑功能：" class="headerlink" title="基础文字编辑功能："></a>基础文字编辑功能：</h6><blockquote><p>写MarkDown语法也行，用自带的快捷方式也能达到一样的效果，整挺好，平时用到的功能都在</p></blockquote><h6 id="显示和外观："><a href="#显示和外观：" class="headerlink" title="显示和外观："></a>显示和外观：</h6><blockquote><p>字体和主题是相关的;</p><p>github主题和Pixyll主题还行，就是字间距看着有点宽</p></blockquote><p>下了个CatFish主题，用着不错<a href="https://github.com/leaf-hsiao/catfish" target="_blank" rel="noopener">下载地址</a></p><h6 id="主题的修改："><a href="#主题的修改：" class="headerlink" title="主题的修改："></a>主题的修改：</h6><blockquote><p>文件-&gt;偏好设置-&gt;外观-&gt;打开主题文件夹;</p><p>这样就跳转到C:\Users\\AppData\Roaming\Typora\themes文件夹下，打开主题名.css文件，修改对应内容就行;</p><p>下载好的主题丢这个文件夹，再重启软件，主题就能用了</p></blockquote><h6 id="主题下载："><a href="#主题下载：" class="headerlink" title="主题下载："></a>主题下载：</h6><blockquote><p>在打开主题文件夹旁边还有一个获取主题，他会使用浏览器跳转到<a href="http://theme.typora.io/，但是我加载不出来，科学上网也不行，很神秘" target="_blank" rel="noopener">http://theme.typora.io/，但是我加载不出来，科学上网也不行，很神秘</a>;</p><p>不如直接在github上搜typra-themes</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown_test</title>
    <link href="http://spcablast.club/2022/03/26/Markdown_test/"/>
    <id>http://spcablast.club/2022/03/26/Markdown_test/</id>
    <published>2022-03-26T02:15:49.304Z</published>
    <updated>2021-04-24T12:07:09.991Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>##写点啥呢 熟悉一下Markdown语法<br>    于2021年4月24日晚19点54分</p><blockquote><p>过沙溪急，烟溪冷，月溪明</p></blockquote><p>这里是<a href="Spcablast.github.io">spca的博客测试文章</a>的链接</p><p>###标题下面一定会有文字框吗<br>是这样吗<br>并不是的，似乎只有一级标题下才有</p><p>###再试一次<br>    加了缩进的话就有文字框了，一个Tab</p><p>![name] (图片路径即可插入图片)</p><p><strong>我是粗体的金戈铁马，气吞万里如虎</strong></p><p><em>我是斜体的小桥流水人家，夕阳西下</em></p><p>看着表格的格式这辈子都不想用的</p><p>整段代码</p><pre><code>#include&lt;stdlib.h&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://spcablast.club/2022/03/26/hello-world/"/>
    <id>http://spcablast.club/2022/03/26/hello-world/</id>
    <published>2022-03-26T01:52:01.402Z</published>
    <updated>2020-01-10T13:09:23.526Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/26/20220326/"/>
    <id>http://spcablast.club/2022/03/26/20220326/</id>
    <published>2022-03-25T16:00:00.000Z</published>
    <updated>2022-03-26T15:30:14.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="912-排序数组"><a href="#912-排序数组" class="headerlink" title="912. 排序数组"></a><a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">912. 排序数组</a></h4><p>难度中等506收藏分享切换为英文接收动态反馈</p><p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [5,2,3,1]</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [5,1,1,2,0,0]</span><br><span class="line">输出：[0,0,1,1,2,5]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= nums.length &lt;= 5 * 104</code></p></li><li><p><code>-5 * 104 &lt;= nums[i] &lt;= 5 * 104</code> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 各种排序</span></span><br><span class="line">    <span class="comment">// 1.0 冒泡, 好的超时了，不愧是n方</span></span><br><span class="line">    <span class="comment">// vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) &#123;</span></span><br><span class="line">    <span class="comment">//     int len = nums.size();</span></span><br><span class="line">    <span class="comment">//     for(int i = 0; i&lt; len; ++i)&#123;</span></span><br><span class="line">    <span class="comment">//         for(int j = i; j&lt; len; ++j)&#123;</span></span><br><span class="line">    <span class="comment">//             if(nums[j] &lt; nums[i])&#123;</span></span><br><span class="line">    <span class="comment">//                 swap(nums[i], nums[j]);</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return nums;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 1.1快排</span></span><br><span class="line">    <span class="comment">// 需要一个函数，从k到l，比第一个数小的放左边，比他大的放右边</span></span><br><span class="line">    <span class="comment">// int _sort(vector&lt;int&gt;&amp; nums, int start, int end)&#123;</span></span><br><span class="line">    <span class="comment">//     int flag = nums[end];</span></span><br><span class="line">    <span class="comment">//     int i = start - 1, j = 0;</span></span><br><span class="line">    <span class="comment">//     for(j = start; j&lt; end; ++j)&#123;</span></span><br><span class="line">    <span class="comment">//         if(nums[j] &gt;= flag)&#123;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         else&#123;</span></span><br><span class="line">    <span class="comment">//             i++;</span></span><br><span class="line">    <span class="comment">//             swap(nums[i], nums[j]);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     swap(nums[i+1], nums[end]);</span></span><br><span class="line">    <span class="comment">//     return i+1;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// // 随机挑一个座位标志能提高速度吗</span></span><br><span class="line">    <span class="comment">// int randpick(vector&lt;int&gt;&amp; nums, int start, int end)&#123;</span></span><br><span class="line">    <span class="comment">//     int i = rand() % (end - start + 1) + start;</span></span><br><span class="line">    <span class="comment">//     swap(nums[end], nums[i]);</span></span><br><span class="line">    <span class="comment">//     return _sort(nums, start, end);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// void dfs(vector&lt;int&gt;&amp; nums, int start, int end)&#123;</span></span><br><span class="line">    <span class="comment">//     if(start &gt;= end) return;</span></span><br><span class="line">    <span class="comment">//     int pos = randpick(nums, start, end);</span></span><br><span class="line">    <span class="comment">//     // 小于的继续排</span></span><br><span class="line">    <span class="comment">//     dfs(nums, start, pos - 1);</span></span><br><span class="line">    <span class="comment">//     // 大于的继续排</span></span><br><span class="line">    <span class="comment">//     dfs(nums, pos + 1, end);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) &#123;</span></span><br><span class="line">    <span class="comment">//     int len = nums.size();</span></span><br><span class="line">    <span class="comment">//     srand((unsigned)time(NULL));</span></span><br><span class="line">    <span class="comment">//     dfs(nums, 0, len - 1);</span></span><br><span class="line">    <span class="comment">//     return nums;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215. 数组中的第K个最大元素"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">215. 数组中的第K个最大元素</a></h4><p>难度中等1563收藏分享切换为英文接收动态反馈</p><p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>**k**</code> 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p></li></ul><p>  <strong>示例 1:</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4] 和 k &#x3D; 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p>  <strong>示例 2:</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">quickSelect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> q = randomPartition(a, l, r);</span><br><span class="line">        <span class="keyword">if</span> (q == index) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[q];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q &lt; index ? quickSelect(a, q + <span class="number">1</span>, r, index) : quickSelect(a, l, q - <span class="number">1</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">randomPartition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = rand() % (r - l + <span class="number">1</span>) + l;</span><br><span class="line">        swap(a[i], a[r]);</span><br><span class="line">        <span class="keyword">return</span> partition(a, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = a[r], i = l - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j &lt; r; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= x) &#123;</span><br><span class="line">                swap(a[++i], a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[i + <span class="number">1</span>], a[r]);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        srand(time(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> quickSelect(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, nums.<span class="built_in">size</span>() - k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/solution/shu-zu-zhong-de-di-kge-zui-da-yuan-su-by-leetcode-/" target="_blank" rel="noopener">地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="排序" scheme="http://spcablast.club/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/26/20220327/"/>
    <id>http://spcablast.club/2022/03/26/20220327/</id>
    <published>2022-03-25T16:00:00.000Z</published>
    <updated>2022-03-27T15:18:54.870Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></h4><p>难度中等4540收藏分享切换为英文接收动态反馈</p><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，*使得 *a + b + c =</em> 0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">//先排序？</span></span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; (nums[i] == nums[i - <span class="number">1</span>]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> target = -nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; i+<span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(j &lt; k &amp;&amp; nums[j] + nums[k] &gt; target)&#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j == k)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] + nums[k] == target)&#123;</span><br><span class="line">                    ans.push_back(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. 环形链表</a></h4><p>难度简单1437收藏分享切换为英文接收动态反馈</p><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>], pos = <span class="number">-1</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// unordered_set&lt;ListNode*&gt; cnt;</span></span><br><span class="line">        <span class="comment">// while(head)&#123;</span></span><br><span class="line">        <span class="comment">//     if(cnt.count(head)) return true;</span></span><br><span class="line">        <span class="comment">//     cnt.insert(head);</span></span><br><span class="line">        <span class="comment">//     head = head-&gt;next;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return false;</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">            <span class="comment">//只需要判断fast是不是空就行了，因为他走得快</span></span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">NULL</span> || fast-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="双指针" scheme="http://spcablast.club/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/23/20220323/"/>
    <id>http://spcablast.club/2022/03/23/20220323/</id>
    <published>2022-03-22T16:00:00.000Z</published>
    <updated>2022-03-23T15:51:57.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="146-LRU-缓存"><a href="#146-LRU-缓存" class="headerlink" title="146. LRU 缓存"></a><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">146. LRU 缓存</a></h4><p>难度中等2043</p><p>请你设计并实现一个满足 <a href="https://baike.baidu.com/item/LRU" target="_blank" rel="noopener">LRU (最近最少使用) 缓存</a> 约束的数据结构。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong> 作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字 <code>key</code> 已经存在，则变更其数据值 <code>value</code> ；如果不存在，则向缓存中插入该组 <code>key-value</code> 。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该 <strong>逐出</strong> 最久未使用的关键字。</li></ul><p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code> 的平均时间复杂度运行。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">"LRUCache"</span>, <span class="string">"put"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"put"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>, <span class="string">"get"</span>]</span><br><span class="line">[[<span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">2</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="number">3</span>], [<span class="number">4</span>]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, <span class="number">1</span>, null, <span class="number">-1</span>, null, <span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = <span class="keyword">new</span> LRUCache(<span class="number">2</span>);</span><br><span class="line">lRUCache.<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 缓存是 &#123;1=1&#125;</span></span><br><span class="line">lRUCache.<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 缓存是 &#123;1=1, 2=2&#125;</span></span><br><span class="line">lRUCache.<span class="built_in">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 1</span></span><br><span class="line">lRUCache.<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="built_in">get</span>(<span class="number">2</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>); <span class="comment">// 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span></span><br><span class="line">lRUCache.<span class="built_in">get</span>(<span class="number">1</span>);    <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">lRUCache.<span class="built_in">get</span>(<span class="number">3</span>);    <span class="comment">// 返回 3</span></span><br><span class="line">lRUCache.<span class="built_in">get</span>(<span class="number">4</span>);    <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MyListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key,val;</span><br><span class="line">    MyListNode* next;</span><br><span class="line">    MyListNode* pre;</span><br><span class="line">    MyListNode():key(<span class="number">0</span>), val(<span class="number">0</span>), next(<span class="literal">nullptr</span>), pre(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    MyListNode(<span class="keyword">int</span> x, <span class="keyword">int</span> y):key(x), val(y), next(<span class="literal">nullptr</span>), pre(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;myListNode;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, MyListNode*&gt; m_map;</span><br><span class="line">    myListNode* head;</span><br><span class="line">    myListNode* tail;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 得有一个双向链表，插入放最后，更新了值之后拿出来放最后</span></span><br><span class="line">    <span class="comment">// 一个指针指头，一个指针指尾，那是不是要一个头节点和一个尾节点</span></span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</span><br><span class="line">        head = <span class="keyword">new</span> myListNode();</span><br><span class="line">        tail = <span class="keyword">new</span> myListNode();</span><br><span class="line">        head-&gt;next = tail;</span><br><span class="line">        tail-&gt;pre = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询，没有返回-1，</span></span><br><span class="line">        <span class="keyword">if</span>(!m_map.count(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有返回值,且调整优先级，放到队列末尾</span></span><br><span class="line">        myListNode* node = m_map[key];</span><br><span class="line">        MoveToTail(node);</span><br><span class="line">        <span class="keyword">return</span> node-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询 ，没有直接插入到末尾</span></span><br><span class="line">        <span class="keyword">if</span>(!m_map.count(key))&#123;</span><br><span class="line">            myListNode *node = <span class="keyword">new</span> myListNode(key, value);</span><br><span class="line">            m_map[key] = node;</span><br><span class="line">            ToTail(node);</span><br><span class="line">            ++<span class="built_in">size</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">size</span> &gt; capacity )&#123;</span><br><span class="line">                MyListNode* node =  decline();</span><br><span class="line">                m_map.erase(node-&gt;key);</span><br><span class="line">                <span class="built_in">size</span>--;</span><br><span class="line">                <span class="keyword">delete</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改节点值</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            myListNode* node = m_map[key];</span><br><span class="line">            node-&gt;val = value;</span><br><span class="line">            MoveToTail(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MoveToTail</span><span class="params">(myListNode* node)</span></span>&#123;</span><br><span class="line">        node-&gt;pre-&gt;next = node-&gt;next;</span><br><span class="line">        node-&gt;next-&gt;pre = node-&gt;pre;</span><br><span class="line">        ToTail(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ToTail</span><span class="params">(myListNode* node)</span></span>&#123;</span><br><span class="line">        tail-&gt;pre-&gt;next = node;</span><br><span class="line">        node-&gt;pre = tail-&gt;pre;</span><br><span class="line"></span><br><span class="line">        node-&gt;next = tail;</span><br><span class="line">        tail-&gt;pre = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(myListNode* node)</span></span>&#123;</span><br><span class="line">        node-&gt;pre-&gt;next = node-&gt;next;</span><br><span class="line">        node-&gt;next-&gt;pre = node-&gt;pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">myListNode* <span class="title">decline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        myListNode* node = head-&gt;next;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="链表" scheme="http://spcablast.club/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/19/20220319/"/>
    <id>http://spcablast.club/2022/03/19/20220319/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2022-03-19T04:27:02.857Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></h4><p>难度中等7147</p><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我觉得我行了，直接滑动窗口</span></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>, ans = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span> &gt; cnt;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; len)&#123;</span><br><span class="line">            <span class="comment">//往右进一步</span></span><br><span class="line">            <span class="keyword">int</span> c = s[right] - <span class="string">'a'</span>;</span><br><span class="line">            cnt[c]++;</span><br><span class="line"></span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span>(cnt[c] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, ans);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(cnt[c] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                ans--;</span><br><span class="line">                cnt[s[left] - <span class="string">'a'</span>]--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="滑动窗口" scheme="http://spcablast.club/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>热知识（持续更新）</title>
    <link href="http://spcablast.club/2022/03/19/%E7%83%AD%E7%9F%A5%E8%AF%86/"/>
    <id>http://spcablast.club/2022/03/19/%E7%83%AD%E7%9F%A5%E8%AF%86/</id>
    <published>2022-03-18T16:00:00.000Z</published>
    <updated>2022-03-19T07:08:15.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>心理学家Eder（1978）在一项儿童友谊关系的长期研究中发现，男孩子通过玩耍交朋友时往往是一群人一起玩，而女孩子是一对一对地玩；对成年人来说，男性之间的关系发展往往取决于他们是否参加了共同的活动，如一起踢足球等；而成年女性要想成为朋友，一起聊聊天就有可能。Wright（1982）把男性交友的倾向称为面对面（face to face）方式，而把成年女性交友的方式叫做肩并肩（side by side）方式。                                                                《社会心理学第三版第七章第二节》</p><p>皮肤拥有很多隐含着各种信息的指示色，甚至蓝色也属于皮肤色谱之一，它反映的是血液循环减弱而产生的体寒，或是由肺病、血栓（Thrombose）导致的血液性缺氧，缺氧会阻碍血液循环，使得血液无法及时流回心脏。蓝色的静脉血属于正常现象，它会从心脏流到肺部被人体重新回收利用。有一种青紫色的皮肤病叫作发绀（Zyanose），其希腊语本意为“蓝色”；皮肤发黑通常是由于老旧的血液堆积在一起，但也有可能是组织坏死，医学上称之为坏疽（Nekrose）。《皮肤的秘密》</p><p>从事科学研究的人，一定要坚信任何事情的发生，决不会是无缘无故的。</p><p>一般而言，套套逻辑并不是「四足动物有四只脚」那么简单，那么一目了然。空泛而没有内容的，而又不可能错的「理论」多的是，然而很多时就是大学博士也不易察觉。</p><p>在经济学上，一个不可或缺的基本假设是：每个人的任何行为都是为自己争取最大利益。但一个人抽烟或跳楼，对自己的身体是有害的。假若我们说抽烟或跳楼的行为，是因为「争取个人最大利益」，那就是套套逻辑了。在那个假设下，任何行为都算在其内，以「争取个人利益」来「解释」抽烟或跳楼，不可能错，因为假设的本身是一般地包括了人的所有行为。但如果所有人的行为都是定义地、空泛地被解释了，那么整个经济学就没有什么内容。</p><p>举另一个例子。有一位经济学者，试图以事实考证，私营企业的生产成本是否那企业所能做到的最低成本。但根据经济学的定义，所有私营企业，为了要图私利，必定会尽可能减低生产成本。于是，这位学者所试图的考证是套套逻辑，不可能错，但也没有内容，因为定义本身不容许有可以减低生产成本而又故意不减低的行为。</p><p>套套逻辑有一点很可取的特色：它有极大的一般性。假若我们能把范围加以约束、收窄，有时可以促成一个有内容的－－可能错的－－理论，其解释能力之强，令人拍案叫绝。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书" scheme="http://spcablast.club/categories/%E4%B9%A6/"/>
    
    
    <category term="摘选" scheme="http://spcablast.club/tags/%E6%91%98%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>好用的小工具（持续更新）</title>
    <link href="http://spcablast.club/2022/03/18/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://spcablast.club/2022/03/18/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-03-18T00:49:13.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>话不多说直接上网站</p><table><thead><tr><th align="center"></th><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">网址</td><td align="center">内容</td><td></td></tr><tr><td align="center"><a href="https://codetop.cc/home" target="_blank" rel="noopener">https://codetop.cc/home</a></td><td align="center">按面试出现的频率排序力扣题</td><td></td></tr><tr><td align="center"><a href="https://tool.chinaz.com/dns/?type=1&amp;host=aka.ms&amp;ip=" target="_blank" rel="noopener">https://tool.chinaz.com/dns/?type=1&amp;host=aka.ms&amp;ip=</a></td><td align="center">根据域名查ip地址</td><td></td></tr><tr><td align="center"><a href="https://zh.z-lib.org/" target="_blank" rel="noopener">https://zh.z-lib.org/</a></td><td align="center">数字图书馆（谁用谁知道）</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://spcablast.club/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="网站" scheme="http://spcablast.club/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/17/20220317/"/>
    <id>http://spcablast.club/2022/03/17/20220317/</id>
    <published>2022-03-16T16:00:00.000Z</published>
    <updated>2022-03-17T13:24:34.928Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></h4><p>难度简单2363</p><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        ListNode* left = head;</span><br><span class="line">        ListNode* right = head;</span><br><span class="line">        <span class="keyword">while</span>(left)&#123;</span><br><span class="line">            <span class="built_in">list</span>.push_back(left-&gt;val);</span><br><span class="line">            left = left-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right)&#123;</span><br><span class="line">             right-&gt;val = <span class="built_in">list</span>[cnt<span class="number">-1</span>];</span><br><span class="line">             cnt--;</span><br><span class="line">             right = right-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">25. K 个一组翻转链表</a></h4><p>难度困难1530</p><p>给你一个链表，每 <em>k</em> 个节点一组进行翻转，请你返回翻转后的链表。</p><p><em>k</em> 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 <em>k</em> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p><strong>进阶：</strong></p><ul><li>你可以设计一个只使用常数额外空间的算法来解决此问题吗？</li><li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际进行节点交换。</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class="line">输出：[2,1,4,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], k = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">list</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, total = <span class="number">0</span>;</span><br><span class="line">        ListNode* left = head;</span><br><span class="line">        ListNode* right = head;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">while</span>(left)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt &lt; k)&#123;</span><br><span class="line">                temp.push_back(left-&gt;val);</span><br><span class="line">                left = left-&gt;next;</span><br><span class="line">                cnt++;</span><br><span class="line">                total++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt == k)&#123;</span><br><span class="line">                <span class="built_in">list</span>.push_back(temp);</span><br><span class="line">                temp.<span class="built_in">clear</span>();</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = total - cnt;</span><br><span class="line">        <span class="keyword">float</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numofvector = (i / k) ;</span><br><span class="line">        <span class="keyword">int</span> cicle = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>(cicle &lt; numofvector)&#123;</span><br><span class="line">            index = <span class="built_in">ceil</span>(i/k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                right-&gt;val = <span class="built_in">list</span>[cicle][k - j - <span class="number">1</span>];</span><br><span class="line">                <span class="comment">//right-&gt;val = cnt;</span></span><br><span class="line">                right = right-&gt;next;</span><br><span class="line">            &#125; </span><br><span class="line">            cicle++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="链表" scheme="http://spcablast.club/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/16/20220316/"/>
    <id>http://spcablast.club/2022/03/16/20220316/</id>
    <published>2022-03-15T16:00:00.000Z</published>
    <updated>2022-03-16T11:38:29.930Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>给你一个整数数组 citations ，其中 citations[i] 表示研究者的第 i 篇论文被引用的次数。计算并返回该研究者的 h 指数。</p><p>根据维基百科上 h 指数的定义：h 代表“高引用次数”，一名科研人员的 h指数是指他（她）的 （n 篇论文中）总共有 h 篇论文分别被引用了至少 h 次。且其余的 n - h 篇论文每篇被引用次数 不超过 h 次。</p><p>如果 h 有多种可能的值，h 指数 是其中最大的那个。</p><p>示例 1：</p><p>输入：citations = [3,0,6,1,5]<br>输出：3<br>解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。<br>     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。<br>示例 2：</p><p>输入：citations = [1,3,1]<br>输出：1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int hIndex(vector&lt;int&gt;&amp; citations) &#123;</span><br><span class="line">        &#x2F;&#x2F;做题先阅读理解</span><br><span class="line">        &#x2F;&#x2F;有n个数，其中h个数的值大于h，剩余的值小于h</span><br><span class="line">        &#x2F;&#x2F;那我是不是排个序，欸先排</span><br><span class="line">        int ans &#x3D; 0, cnt &#x3D; 0;</span><br><span class="line">        cnt &#x3D; citations.size();</span><br><span class="line">        sort(citations.begin(),citations.end());&#x2F;&#x2F;从小到大</span><br><span class="line">        for(int i &#x3D; 0 ; i &lt; cnt; ++i)&#123;</span><br><span class="line">            if(citations[i] &gt;&#x3D; (cnt - i))&#123;</span><br><span class="line">                ans &#x3D; max(cnt - i, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134. 加油站"></a><a href="https://leetcode-cn.com/problems/gas-station/" target="_blank" rel="noopener">134. 加油站</a></h4><p>难度中等858</p><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><p><strong>示例 1:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], cost = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释:</span><br><span class="line">从 <span class="number">3</span> 号加油站(索引为 <span class="number">3</span> 处)出发，可获得 <span class="number">4</span> 升汽油。此时油箱有 = <span class="number">0</span> + <span class="number">4</span> = <span class="number">4</span> 升汽油</span><br><span class="line">开往 <span class="number">4</span> 号加油站，此时油箱有 <span class="number">4</span> - <span class="number">1</span> + <span class="number">5</span> = <span class="number">8</span> 升汽油</span><br><span class="line">开往 <span class="number">0</span> 号加油站，此时油箱有 <span class="number">8</span> - <span class="number">2</span> + <span class="number">1</span> = <span class="number">7</span> 升汽油</span><br><span class="line">开往 <span class="number">1</span> 号加油站，此时油箱有 <span class="number">7</span> - <span class="number">3</span> + <span class="number">2</span> = <span class="number">6</span> 升汽油</span><br><span class="line">开往 <span class="number">2</span> 号加油站，此时油箱有 <span class="number">6</span> - <span class="number">4</span> + <span class="number">3</span> = <span class="number">5</span> 升汽油</span><br><span class="line">开往 <span class="number">3</span> 号加油站，你需要消耗 <span class="number">5</span> 升汽油，正好足够你返回到 <span class="number">3</span> 号加油站。</span><br><span class="line">因此，<span class="number">3</span> 可为起始索引。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; gas, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int totol, ans = -1, index;</span></span><br><span class="line">        <span class="comment">// int num0fgas = gas.size();</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; num0fgas; i++)&#123;//初始点</span></span><br><span class="line">        <span class="comment">//     totol = 0;</span></span><br><span class="line">        <span class="comment">//     int startindex = i;</span></span><br><span class="line">        <span class="comment">//     int cnt = gas.size();</span></span><br><span class="line">        <span class="comment">//     index = 0;</span></span><br><span class="line">        <span class="comment">//     while(cnt--)&#123;</span></span><br><span class="line">        <span class="comment">//         totol += gas[startindex % num0fgas];</span></span><br><span class="line">        <span class="comment">//         totol -= cost[startindex % num0fgas];</span></span><br><span class="line">        <span class="comment">//         if(totol &lt; 0)&#123;</span></span><br><span class="line">        <span class="comment">//             break;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         startindex++;</span></span><br><span class="line">        <span class="comment">//         index++;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     if(totol &gt;= 0 &amp;&amp; index == num0fgas)&#123;</span></span><br><span class="line">        <span class="comment">//         ans = i;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return ans;</span></span><br><span class="line">        <span class="comment">//我觉得我写的没问题啊，这不和题解一样，怎么超时了</span></span><br><span class="line">        <span class="keyword">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> sumOfGas = <span class="number">0</span>, sumOfCost = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cnt &lt; n) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = (i + cnt) % n;</span><br><span class="line">                sumOfGas += gas[j];</span><br><span class="line">                sumOfCost += cost[j];</span><br><span class="line">                <span class="keyword">if</span> (sumOfCost &gt; sumOfGas) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt == n) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = i + cnt + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>《热风》随感录二十五</title>
    <link href="http://spcablast.club/2022/03/16/%E7%83%AD%E9%A3%8E%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://spcablast.club/2022/03/16/%E7%83%AD%E9%A3%8E%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-03-15T16:00:00.000Z</published>
    <updated>2022-03-16T09:38:13.062Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我一直从前曾见严又陵在一本什么书上发过议论，书名和原文都忘记了。大意是：“在北京道上，看见许多孩子，辗转于车轮、马足之间，很怕把他们碰死了，又想起他们将来怎样得了，很是害怕。”其实别的地方，也都如此，不过车马多少不同罢了。现在到了北京，这情形还未改变，我也时时发起这样的忧虑；一面又佩服严又陵究竟是“做”过赫胥黎《天演论》的，的确与众不同：是一个十九世纪末年中国感觉锐敏的人。<br><strong>穷人的孩子蓬头垢面的在街上转，阔人的孩子妖形妖势娇声娇气的在家里转。转得大了，都昏天黑地的在社会上转，同他们的父亲一样，或者还不如。</strong><br>所以看十来岁的孩子，便可以逆料二十年后中国的情形；看二十多岁的青年，——他们大抵有了孩子，尊为爹爹了，——便可以推测他儿子、孙子，晓得五十年后七十年后中国的情形。<br>中国的孩子，只要生，不管他好不好，只要多，不管他才不才。生他的人，不负教他的责任。虽然“人口众多”这一句话，很可以闭了眼睛自负，然而这许多人口，便只在尘土中辗转，<strong>小的时候，不把他当人，大了以后，也做不了人。</strong></p><blockquote><p>已经2022，大家不生了，好</p><p>感觉最近“原生家庭”的话题比较多，年轻的一代意识到了家庭教育的重要性，这种情况在下一代应该能大为改善。现代心理学的一门分支- 家庭治疗 也发展的挺好。</p></blockquote><p>中国娶妻早是福气，儿子多也是福气。所有小孩，只是他父母福气的材料，并非将来的“人”的萌芽，所以随便辗转，没人管他，因为无论如何，数目和材料的资格，总还存在。即使偶尔送进学堂，然而社会和家庭的习惯，尊长和伴侣的脾气，却多与教育反背，仍然使他与新时代不合。大了以后，幸而生存，也不过“仍旧贯如之何”，照例是制造孩子的家伙，不是“人”的父亲，他生了孩子，便仍然不是“人”的萌芽。<br>最看不起女人的奥国人华宁该尔（Otto Weininger）曾把女人分成两大类：一是“母妇”，一是“娼妇”。照这分法，男人便也可以分作“父男”和“嫖男”两类了。但这父男一类，却又可以分成两种：其一是孩子之父，其一是“人”之父，第一种只会生，不会教，还带点嫖男的气息。第二种是生了孩子，还要想怎样教育，才能使这生下来的孩子，将来成一个完全的人。<br>前清末年，某省初开师范学堂的时候，有一位老先生听了，很为诧异，便发愤说：“师何以还须受教，如此看来，还该有父范学堂了！”这位老先生，便以为父的资格，只要能生。能生这件事，自然便会，何须受教呢。却不知中国现在，正须父范学堂；这位先生便须编入初等第一年级。<br>因为我们中国所多的是孩子之父；所以以后是只要“人”之父！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书" scheme="http://spcablast.club/categories/%E4%B9%A6/"/>
    
    
    <category term="鲁迅全集" scheme="http://spcablast.club/tags/%E9%B2%81%E8%BF%85%E5%85%A8%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/15/20220315/"/>
    <id>http://spcablast.club/2022/03/15/20220315/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-03-16T11:04:28.794Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="2044-统计按位或能得到最大值的子集数目"><a href="#2044-统计按位或能得到最大值的子集数目" class="headerlink" title="2044. 统计按位或能得到最大值的子集数目"></a><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/" target="_blank" rel="noopener">2044. 统计按位或能得到最大值的子集数目</a></h4><p>难度中等94</p><p>给你一个整数数组 <code>nums</code> ，请你找出 <code>nums</code> 子集 <strong>按位或</strong> 可能得到的 <strong>最大值</strong> ，并返回按位或能得到最大值的 <strong>不同非空子集的数目</strong> 。</p><p>如果数组 <code>a</code> 可以由数组 <code>b</code> 删除一些元素（或不删除）得到，则认为数组 <code>a</code> 是数组 <code>b</code> 的一个 <strong>子集</strong> 。如果选中的元素下标位置不一样，则认为两个子集 <strong>不同</strong> 。</p><p>对数组 <code>a</code> 执行 <strong>按位或</strong> ，结果等于 <code>a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]</code>（下标从 <strong>0</strong> 开始）。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：</span><br><span class="line">- [3]</span><br><span class="line">- [3,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [2,2,2]</span><br><span class="line">输出：7</span><br><span class="line">解释：[2,2,2] 的所有非空子集的按位或都可以得到 2 。总共有 23 - 1 &#x3D; 7 个子集。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [3,2,1,5]</span><br><span class="line">输出：6</span><br><span class="line">解释：子集按位或可能的最大值是 7 。有 6 个子集按位或可以得到 7 ：</span><br><span class="line">- [3,5]</span><br><span class="line">- [3,1,5]</span><br><span class="line">- [3,2,5]</span><br><span class="line">- [3,2,1,5]</span><br><span class="line">- [2,5]</span><br><span class="line">- [2,1,5]</span><br></pre></td></tr></table></figure> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; m_nums;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countMaxOrSubsets</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        ans = INT_MIN;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        m_nums = nums;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> orresult)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos == m_nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(orresult &gt; ans)&#123;</span><br><span class="line">                ans = orresult;</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(orresult == ans)&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(pos + <span class="number">1</span>, orresult | m_nums[pos]);</span><br><span class="line">        dfs(pos + <span class="number">1</span>, orresult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除有序数组中的重复项</a></h4><p>难度简单2512</p><p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你<strong><a href="http://baike.baidu.com/item/原地算法" target="_blank" rel="noopener"> 原地</a></strong> 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 <code>k</code> 个元素，那么 <code>nums</code> 的前 <code>k</code> 个元素应该保存最终结果。</p><p>将最终结果插入 <code>nums</code> 的前 <code>k</code> 个位置后返回 <code>k</code> 。</p><p>不要使用额外的空间，你必须在 <strong><a href="https://baike.baidu.com/item/原地算法" target="_blank" rel="noopener">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums &#x3D; [...]; &#x2F;&#x2F; 输入数组</span><br><span class="line">int[] expectedNums &#x3D; [...]; &#x2F;&#x2F; 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k &#x3D; removeDuplicates(nums); &#x2F;&#x2F; 调用</span><br><span class="line"></span><br><span class="line">assert k &#x3D;&#x3D; expectedNums.length;</span><br><span class="line">for (int i &#x3D; 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] &#x3D;&#x3D; expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">1</span>,<span class="number">2</span>,_]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span> ，并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span> 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        &#x2F;&#x2F;阿巴阿巴阿巴阿巴</span><br><span class="line">        if(nums.size()  &#x3D;&#x3D; 0) return 0;</span><br><span class="line">        int slow &#x3D; 1;</span><br><span class="line">        int fast &#x3D; 1;</span><br><span class="line">        while(fast &lt; nums.size())&#123;</span><br><span class="line">            if(nums[fast] !&#x3D; nums[fast - 1])&#123;</span><br><span class="line">                nums[slow] &#x3D; nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;   </span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        return slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="dfs" scheme="http://spcablast.club/tags/dfs/"/>
    
    <category term="双指针" scheme="http://spcablast.club/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/14/20220314/"/>
    <id>http://spcablast.club/2022/03/14/20220314/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-14T12:53:11.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="599-两个列表的最小索引总和"><a href="#599-两个列表的最小索引总和" class="headerlink" title="599. 两个列表的最小索引总和"></a><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">599. 两个列表的最小索引总和</a></h4><p>难度简单195</p><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><p><strong>示例 1:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: list1 = [<span class="string">"Shogun"</span>, <span class="string">"Tapioca Express"</span>, <span class="string">"Burger King"</span>, <span class="string">"KFC"</span>]，list2 = [<span class="string">"Piatti"</span>, <span class="string">"The Grill at Torrey Pines"</span>, <span class="string">"Hungry Hunter Steakhouse"</span>, <span class="string">"Shogun"</span>]</span><br><span class="line">输出: [<span class="string">"Shogun"</span>]</span><br><span class="line">解释: 他们唯一共同喜爱的餐厅是“Shogun”。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findRestaurant(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; list1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; list2) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; map1, map2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; list1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            map1[list1[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minans = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; list2.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map1.count(list2[i]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(minans &gt; map1[list2[i]] + i)&#123;</span><br><span class="line">                    ans.resize(<span class="number">0</span>);</span><br><span class="line">                    minans =  map1[list2[i]] + i;</span><br><span class="line">                    ans.push_back(list2[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(minans == map1[list2[i]] + i)&#123;</span><br><span class="line">                    ans.push_back(list2[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="289-生命游戏"><a href="#289-生命游戏" class="headerlink" title="289. 生命游戏"></a><a href="https://leetcode-cn.com/problems/game-of-life/" target="_blank" rel="noopener">289. 生命游戏</a></h4><p>难度中等410</p><p>根据 <a href="https://baike.baidu.com/item/生命游戏/2926434?fr=aladdin" target="_blank" rel="noopener">百度百科</a> ， <strong>生命游戏</strong> ，简称为 <strong>生命</strong> ，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。</p><p>给定一个包含 <code>m × n</code> 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态： <code>1</code> 即为 <strong>活细胞</strong> （live），或 <code>0</code> 即为 <strong>死细胞</strong> （dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p><ol><li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li><li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li><li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li><li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li></ol><p>下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 <code>m x n</code> 网格面板 <code>board</code> 的当前状态，返回下一个状态。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg" alt="img"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; copy;</span><br><span class="line">    <span class="keyword">int</span> neighbors[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//我感觉会超时</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cellnum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//不是当前点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!(neighbors[i] == <span class="number">0</span> &amp;&amp; neighbors[j] == <span class="number">0</span>) )&#123;</span><br><span class="line">                    <span class="keyword">if</span>((neighbors[i] + x &gt;= <span class="number">0</span> &amp;&amp;　neighbors[i] + x &lt; copy.<span class="built_in">size</span>())&amp;&amp; (neighbors[j] + y &gt;= <span class="number">0</span> &amp;&amp; neighbors[j] + y &lt; copy[<span class="number">0</span>].<span class="built_in">size</span>())&amp;&amp; copy[neighbors[i] + x][neighbors[j] + y] == <span class="number">1</span>)&#123;</span><br><span class="line">                        ret++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; board[<span class="number">0</span>].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                temp.push_back(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            copy.push_back(temp);</span><br><span class="line">            temp.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;board.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;board[<span class="number">0</span>].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> ans = cellnum(i,j);</span><br><span class="line">                <span class="keyword">if</span>(ans == <span class="number">3</span> &amp;&amp;　board[i][j] == <span class="number">0</span> )&#123;</span><br><span class="line">                    board[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((ans &lt; <span class="number">2</span> || ans &gt; <span class="number">3</span>)&amp;&amp; board[i][j])&#123;</span><br><span class="line">                    board[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>《青年在选择职业时的考虑》</title>
    <link href="http://spcablast.club/2022/03/14/%E9%9D%92%E5%B9%B4%E5%9C%A8%E9%80%89%E6%8B%A9%E8%81%8C%E4%B8%9A%E6%97%B6%E5%80%99%E7%9A%84%E8%80%83%E8%99%91/"/>
    <id>http://spcablast.club/2022/03/14/%E9%9D%92%E5%B9%B4%E5%9C%A8%E9%80%89%E6%8B%A9%E8%81%8C%E4%B8%9A%E6%97%B6%E5%80%99%E7%9A%84%E8%80%83%E8%99%91/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-14T13:06:04.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>自然本身给动物规定了它应该遵循的活动范围，动物也就安分地在这个范围内活动，不试图越出这个范围，甚至不考虑有其他什么范围的存在。神也给人指定了共同的目标──使人类和他自己趋于高尚，但是，神要人自己去寻找可以达到这个目标的手段；神让人在社会上选择一个最适合于他、最能使他和社会都得到提高的地位。</p><p>能有这样的选择是人比其他生物远为优越的地方，但是这同时也是可能毁灭人的一生、破坏他的一切计划并使他陷于不幸的行为。因此，认真地考虑这种选择──这无疑是开始走上生活道路而又不愿拿自己最重要的事业去碰运气的青年的首要责任。</p><p>每个人眼前都有一个目标，这个目标至少在他本人看来是伟大的，而且如果最深刻的信念，即内心深处的声音，认为这个目标是伟大的，那他实际上也是伟大的，因为神决不会使世人完全没有引导；神总是轻声而坚定地作启示。</p><p>但是，这声音很容易被淹没；我们认为是灵感的东西可能须臾而生，同样可能须臾而逝。也许，我们的幻想由然而生，我们的感情激动起来，我们的眼前浮想联翩，我们狂热地追求我们以为是神本身给我们指出的目标；但是，我们梦寐以求的东西很快就使我们厌恶──于是我们的整个存在也就毁灭了。</p><p>因此，我们应当认真考虑：所选择的职业是不是真正使我们受到鼓舞？我们的内心是不是同意？我们受到的鼓舞是不是一种迷误？我们认为是神的召唤的东西是不是一种自欺？但是，不找出鼓舞的来源本身，我们怎么能认清这些呢？</p><p>伟大的东西是光辉的，光辉则引起虚荣心，而虚荣心容易给人鼓舞或者是一种我们觉得是鼓舞的东西；但是，被名利弄得鬼迷心窍的人，理智已无法支配他，于是他一头栽进那不可抗拒的欲念驱使他去的地方；他已经不再自己选择他在社会上的地位，而听任偶然机会和幻想去决定它。</p><p>我们的使命绝不是求得一个最足以炫耀的职业，因为它不是那种使我们长期从事而始终不会感到厌倦、始终不会松动、始终不会情绪低落的职业，相反，我们很快就会觉得，我们的愿望没有得到满足，我们理想没有实现，我们就将怨天尤人。</p><p>但是，不只是虚荣心能够引起对这种或那种职业突然的热情。也许，我们自己也会用幻想把这种职业美化，把它美化成人生所能提供的至高无上的东西。我们没有仔细分析它，没有衡量它的全部份量，即它让我们承担的重大责任；我们只是从远处观察它，然而从远处观察是靠不住的。</p><p>在这里，我们自己的理智不能给我们充当顾问，因为它既不是依靠经验，也不是依靠深入的观察，而是被感情欺骗，受幻想蒙蔽。然而，我们的目光应该投向哪里呢？在我们丧失理智的地方，谁来支持我们呢？</p><p>是我们的父母， 他们走过了漫长的生活道路， 饱尝了人世的辛酸。──我们的心这样提醒我们。</p><p>如果我们通过冷静的研究，认清所选择的职业的全部份量，了解它的困难以后，我们仍然对它充满热情，我们仍然爱它。觉得自己适合它，那时我们就应该选择它，那时我们既不会受热情的欺骗，也不会仓促从事。</p><p>但是，我们并不能总是能够选择我们自认为适合的职业；我们在社会上的关系，还在我们有能力对它们起决定性影响以前就已经在某种程度上开始确立了。</p><p>我们的体质常常威胁我们，可是任何人也不敢藐视它的权利。</p><p>诚然，我们能够超越体质的限制，但这么一来，我们也就垮得更快；在这种情况下，我们就是冒险把大厦筑在松软的废墟上，我们的一生也就变成一场精神原则和肉体原则之间的不幸的斗争。但是，一个不能克服自身相互斗争的因素的人，又怎能抗拒生活的猛烈冲击，怎能安静地从事活动呢？然而只有从安静中才能产生伟大壮丽的事业，安静是唯一生长出成熟果实的土壤。</p><p>尽管我们由于体质不适合我们的职业，不能持久地工作，而且工作起来也很少乐趣，但是，为了恪尽职守而牺牲自己幸福的思想激励着我们不顾体弱去努力工作。如果我们选择了能力不能胜任的职业，那么我们决不能把它做好，我们很快就会自愧无能，并对自己说，我们是无用的人，是不能完成自己使命的社会成员。由此产生的必然结果就是妄自菲薄。还有比这更痛苦的感情吗？还有比这更难于靠外界的赐予来补偿的感情吗？妄自菲薄是一条毒蛇，它永远啮噬着我们心灵，吮吸着其中滋润生命的血液，注入厌世和绝望的毒液。</p><p>如果我们错误地估计了自己的能力，以为能够胜任经过周密考虑而选定的职业，那么这种错误将使我们受到惩罚。即使不受到外界指责，我们也会感到比外界指责更为可怕的痛苦。</p><p>如果我们把这一切都考虑过了，如果我们生活的条件容许我们选择任何一种职业；那么我们就可以选择一种能使我们最有尊严的职业；选择一种建立在我们深信其正确的思想上的职业；选择一种能给我们提供广阔场所来为人类进行活动、接近共同目标（对于这个目标来说，一切职业只不过是手段）即完美境地的职业。</p><p>尊严就是最能使人高尚起来、使他的活动和他的一切努力具有崇高品质的东西，就是使他无可非议、受到众人钦佩并高出于众人之上的东西。</p><p>但是，能给人以尊严的只有这样的职业，在从事这种职业时我们不是作为奴隶般的工具，而是在自己的领域内独立地进行创造；这种职业不需要有不体面的行动（哪怕只是表面上不体面的行动），甚至最优秀的人物也会怀着崇高的自豪感去从事它。最合乎这些要求的职业，并不一定是最高的职业，但总是最可取的职业。</p><p>但是，正如有失尊严的职业会贬低我们一样，那种建立在我们后来认为是错误的思想上的职业也一定使我们感到压抑。</p><p>这里，我们除了自我欺骗，别无解救办法，而以自我欺骗来解救又是多么糟糕！</p><p>那些不是干预生活本身，而是从事抽象真理研究的职业，对于还没有坚定的原则和牢固、不可动摇的信念的青年是最危险的。同时，如果这些职业在我们心里深深地扎下了根，如果我们能够为它们的支配思想牺牲生命、竭尽全力，这些职业看来似乎还是最高尚的。</p><p>这些职业能够使才能适合的人幸福，但也必定使那些不经考虑、凭一时冲动就仓促从事的人毁灭。</p><p>相反，重视作为我们职业的基础的思想，会使我们在社会上占有较高的地位，提高我们本身的尊严，使我们的行为不可动摇。</p><p>一个选择了自己所珍视的职业的人，一想到他可能不称职时就会战战兢兢──这种人单是因为他在社会上所居地位是高尚的，他也就会使自己的行为保持高尚。</p><p>在选择职业时，我们应该遵循的主要指针是人类的幸福和我们自身的完美。不应认为，这两种利益是敌对的，互相冲突的，一种利益必须消灭另一种的；人类的天性本来就是这样的：人们只有为同时代人的完美、为他们的幸福而工作，才能使自己也达到完美。</p><p>如果一个人只为自己劳动，他也许能够成为著名的学者、大哲人、卓越诗人，然而他永远不能成为完美无疵的伟大人物。</p><p>历史承认那些为共同目标劳动因而自己变得高尚的人是伟大人物；经验赞美那些为大多数人带来幸福的人是最幸福的人；宗教本身也教诲我们，人人敬仰的理想人物，就曾为人类牺牲了自己──有谁敢否定这类教诲呢？</p><p>如果我们选择了最能为人类福利而劳动的职业，那么，重担就不能把我们压倒，因为这是为大家而献身；那时我们所感到的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将默默地、但是永恒发挥作用地存在下去，面对我们的骨灰，高尚的人们将洒下热泪。</p><p><a href="https://baike.baidu.com/item/卡尔·马克思" target="_blank" rel="noopener">卡尔·马克思</a>写于1835年8月12日 </p><p>我：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="书" scheme="http://spcablast.club/categories/%E4%B9%A6/"/>
    
    
    <category term="马克思选集" scheme="http://spcablast.club/tags/%E9%A9%AC%E5%85%8B%E6%80%9D%E9%80%89%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Dailycode</title>
    <link href="http://spcablast.club/2022/03/11/20220311/"/>
    <id>http://spcablast.club/2022/03/11/20220311/</id>
    <published>2022-03-10T16:00:00.000Z</published>
    <updated>2022-03-11T13:00:07.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="2049-统计最高分的节点数目"><a href="#2049-统计最高分的节点数目" class="headerlink" title="2049. 统计最高分的节点数目"></a><a href="https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/" target="_blank" rel="noopener">2049. 统计最高分的节点数目</a></h4><p>难度中等94</p><p>给你一棵根节点为 <code>0</code> 的 <strong>二叉树</strong> ，它总共有 <code>n</code> 个节点，节点编号为 <code>0</code> 到 <code>n - 1</code> 。同时给你一个下标从 <strong>0</strong> 开始的整数数组 <code>parents</code> 表示这棵树，其中 <code>parents[i]</code> 是节点 <code>i</code> 的父节点。由于节点 <code>0</code> 是根，所以 <code>parents[0] == -1</code> 。</p><p>一个子树的 <strong>大小</strong> 为这个子树内节点的数目。每个节点都有一个与之关联的 <strong>分数</strong> 。求出某个节点分数的方法是，将这个节点和与它相连的边全部 <strong>删除</strong> ，剩余部分是若干个 <strong>非空</strong> 子树，这个节点的 <strong>分数</strong> 为所有这些子树 <strong>大小的乘积</strong> 。</p><p>请你返回有 <strong>最高得分</strong> 节点的 <strong>数目</strong> 。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/10/03/example-1.png" alt="example-1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：parents = [<span class="number">-1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：</span><br><span class="line">- 节点 <span class="number">0</span> 的分数为：<span class="number">3</span> * <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">- 节点 <span class="number">1</span> 的分数为：<span class="number">4</span> = <span class="number">4</span></span><br><span class="line">- 节点 <span class="number">2</span> 的分数为：<span class="number">1</span> * <span class="number">1</span> * <span class="number">2</span> = <span class="number">2</span></span><br><span class="line">- 节点 <span class="number">3</span> 的分数为：<span class="number">4</span> = <span class="number">4</span></span><br><span class="line">- 节点 <span class="number">4</span> 的分数为：<span class="number">4</span> = <span class="number">4</span></span><br><span class="line">最高得分为 <span class="number">4</span> ，有三个节点得分为 <span class="number">4</span> （分别是节点 <span class="number">1</span>，<span class="number">3</span> 和 <span class="number">4</span> ）。</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; child;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> socre = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> chi : child[start])&#123;</span><br><span class="line">            <span class="keyword">int</span> t = dfs(chi);</span><br><span class="line">            socre *= t;<span class="comment">//分数累乘</span></span><br><span class="line">            <span class="built_in">size</span> -= t;<span class="comment">//除了左右子树还剩多少节点数量</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start != <span class="number">0</span>)&#123;</span><br><span class="line">            socre *= <span class="built_in">size</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socre == <span class="built_in">max</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( socre &gt; <span class="built_in">max</span>)&#123;</span><br><span class="line">            <span class="built_in">max</span> = socre;</span><br><span class="line">            ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt - <span class="built_in">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countHighestScoreNodes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; parents)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//星号，星号，阅读理解题，看题看半天，爬</span></span><br><span class="line">        <span class="comment">//节点的分数是节点子数大小的乘积</span></span><br><span class="line">        <span class="comment">//所以先需要获取所有节点字数大小，</span></span><br><span class="line">        <span class="comment">//把所有节点分数存在map里，然后看最大的数量是几就行了</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//怎么判断取走一个节点，去掉他相关节点之后剩了几棵树呢，那我是不是还得维护一个数组，存每一个节点的左右子数大小，</span></span><br><span class="line">        cnt =  parents.<span class="built_in">size</span>();</span><br><span class="line">        child.resize(cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; cnt; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parents[i] != <span class="number">-1</span>)&#123;</span><br><span class="line">                child[parents[i]].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></h4><p>难度简单753</p><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [1,null,2,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        ans.push_back(root-&gt;val);</span><br><span class="line">        dfs(root-&gt;left,ans);</span><br><span class="line">        dfs(root-&gt;right,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        dfs(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Dailycode" scheme="http://spcablast.club/categories/Dailycode/"/>
    
    
    <category term="算法题" scheme="http://spcablast.club/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    <category term="dfs" scheme="http://spcablast.club/tags/dfs/"/>
    
  </entry>
  
</feed>
